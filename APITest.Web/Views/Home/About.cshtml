@{
    ViewData["Title"] = "About";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>

<p>Use this area to provide additional information.</p>

<div id="container" style="width:100%;height:500px;border:1px solid #ccc"></div>
<script src="~/lib/monaco-editor/min/vs/loader.js"></script>
<script>


</script>
<script>
    require.config({ paths: { 'vs': '/lib/monaco-editor/min/vs' } });
    var editor;
    require(['vs/editor/editor.main'], function (sbLanguage, transpiler) {

        function createDependencyProposals() {
            //函数提示
            return [
                {
                    label: '"lr_Request"',
                    kind: monaco.languages.CompletionItemKind.Function,
                    documentation: "The Lodash library exported as Node.js modules.",
                    insertText: 'lr_Request("")'
                },
                {
                    label: '"lr_submit"',
                    kind: monaco.languages.CompletionItemKind.Function,
                    documentation: "Fast, unopinionated, minimalist web framework",
                    insertText: '"express": "*"'
                },
                {
                    label: '"lr_pppp"',
                    kind: monaco.languages.CompletionItemKind.Function,
                    documentation: "Recursively mkdir, like <code>mkdir -p</code>",
                    insertText: '"mkdirp": "*"'
                }
            ];
        }
        monaco.languages.typescript.javascriptDefaults.setCompilerOptions({ noLib: true, allowNonTsExtensions: true });
        monaco.languages.typescript.typescriptDefaults.setCompilerOptions({ noLib: true });
        monaco.languages.registerCompletionItemProvider('javascript', {
            provideCompletionItems: function (model, position) {

                return createDependencyProposals();

                // find out if we are completing a property in the 'dependencies' object.
                // var textUntilPosition = model.getValueInRange({startLineNumber: 1, startColumn: 1, endLineNumber: position.lineNumber, endColumn: position.column});
                // var match = textUntilPosition.match(/"dependencies"\s*:\s*{\s*("[^"]*"\s*:\s*"[^"]*"\s*,\s*)*("[^"]*)?$/);
                // if (match) {
                // 	return createDependencyProposals();
                // }
                // return [];
            }
        });

        editor = monaco.editor.create(document.getElementById("container"), {
            value: [
                'function x() {',
                '\tconsole.log("Hello world!");',
                '}'
            ].join('\n'),

            language: "javascript",
            //右键菜单
            //contextmenu:false
        });

        //弹出窗
        //var overlayWidget = {
        //	domNode: null,
        //	getId: function() {
        //		return 'my.overlay.widget';
        //	},
        //	getDomNode: function() {
        //		if (!this.domNode) {
        //			this.domNode = document.createElement('div');
        //			this.domNode.innerHTML = 'My overlay widget';
        //			this.domNode.style.background = 'grey';
        //			this.domNode.style.right = '530px';
        //			this.domNode.style.top = '50px';
        //		}
        //		return this.domNode;
        //	},
        //	getPosition: function() {
        //		return null;
        //	}
        //};
        //editor.addOverlayWidget(overlayWidget);

        //添加自定义菜单项
        //editor.addAction({
        //    // An unique identifier of the contributed action.
        //    id: 'my-unique-id',

        //    // A label of the action that will be presented to the user.
        //    label: 'My Label!!!',

        //    // An optional array of keybindings for the action.
        //    keybindings: [
        //        monaco.KeyMod.CtrlCmd | monaco.KeyCode.F10,
        //        // chord
        //        monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_K, monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_M)
        //    ],

        //    // A precondition for this action.
        //    precondition: null,

        //    // A rule to evaluate on top of the precondition in order to dispatch the keybindings.
        //    keybindingContext: null,

        //    contextMenuGroupId: 'navigation',

        //    contextMenuOrder: 3.5,

        //    // Method that will be executed when the action is triggered.
        //    // param editor The editor instance is passed in as a convinience

        //    run: function (ed) {
        //        alert("i'm running => " + ed.getPosition());
        //        return null;
        //    }
        //});
        //去除快捷键
        //editor.getActions().filter((action)=> editor._standaloneKeybindingService.addDynamicKeybinding("-"+action.id))
    });
</script>